//go:build ignore

package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"io"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/iancoleman/strcase"
)

type modelField struct {
	name     string
	typ      string
	readOnly bool
}

type model struct {
	name   string
	fields []modelField
}

func (o model) write(w io.Writer) {
	fmt.Fprintf(w, "type %s struct {\n", strcase.ToCamel(o.name))

	for _, f := range o.fields {
		name := strcase.ToCamel(f.name)

		switch f.name {
		case "id":
			name = "ID"
		}

		fmt.Fprintf(w, "  %s %s `json:%q`\n", name, f.typ, f.name)
	}

	fmt.Fprintf(w, "}\n")

	fieldsStruct := strcase.ToCamel(o.name + "_fields")

	fmt.Fprintf(w, "\n")
	fmt.Fprintf(w, "type %s struct {\n", fieldsStruct)
	fmt.Fprintf(w, "  objectFields\n")
	fmt.Fprintf(w, "}\n")

	fmt.Fprintf(w, "var _ json.Marshaler = (*%s)(nil)\n", fieldsStruct)

	fmt.Fprintf(w, "func New%[1]s() *%[1]s {", fieldsStruct)
	fmt.Fprintf(w, "  return &%s{ objectFields{} }\n", fieldsStruct)
	fmt.Fprintf(w, "}\n")

	for _, f := range o.fields {
		if f.readOnly {
			continue
		}

		argName := strcase.ToLowerCamel(f.name)

		fmt.Fprintf(w, "\n")
		fmt.Fprintf(w, "func (f *%s) %s(%s %s) *%[1]s {\n", fieldsStruct, strcase.ToCamel(f.name), argName, f.typ)
		fmt.Fprintf(w, "  f.set(%q, %s)\n", f.name, argName)
		fmt.Fprintf(w, "  return f\n")
		fmt.Fprintf(w, "}\n")
	}
}

var tagModel = model{
	name: "tag",
	fields: []modelField{
		{name: "id", typ: "int64", readOnly: true},
		{name: "slug", typ: "string", readOnly: true},
		{name: "name", typ: "string"},
		{name: "color", typ: "Color"},
		{name: "text_color", typ: "Color"},
		{name: "match", typ: "string"},
		{name: "matching_algorithm", typ: "MatchingAlgorithm"},
		{name: "is_insensitive", typ: "bool"},
		{name: "is_inbox_tag", typ: "bool"},
		{name: "document_count", typ: "int64", readOnly: true},
	},
}

func main() {
	outputFile := flag.String("output", "", "Destination file")

	flag.Parse()

	var buf bytes.Buffer

	exe, err := os.Executable()
	if err != nil {
		log.Fatal(err)
	}

	fmt.Fprintf(&buf, "// Code generated by %q; DO NOT EDIT.\n",
		strings.Join(append([]string{filepath.Base(exe)}, os.Args[1:]...), " "))
	buf.WriteString("package client\n")

	for _, i := range []string{"encoding/json"} {
		fmt.Fprintf(&buf, "import %q\n", i)
	}

	tagModel.write(&buf)

	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatalf("Formatting code failed: %v\n%s", err, buf.String())
	}

	if *outputFile == "" || *outputFile == "-" {
		os.Stdout.Write(formatted)
	} else if err := os.WriteFile(*outputFile, formatted, 0o644); err != nil {
		log.Fatal("Writing output failed: %v", err)
	}
}
