// Code generated by "generate_models --output models_generated.go"; DO NOT EDIT.
package client

import "encoding/json"

type StoragePath struct {
	ID                int64             `json:"id"`
	Slug              string            `json:"slug"`
	Name              string            `json:"name"`
	Match             string            `json:"match"`
	MatchingAlgorithm MatchingAlgorithm `json:"matching_algorithm"`
	IsInsensitive     bool              `json:"is_insensitive"`
	DocumentCount     int64             `json:"document_count"`
}

type StoragePathFields struct {
	objectFields
}

var _ json.Marshaler = (*StoragePathFields)(nil)

func NewStoragePathFields() *StoragePathFields {
	return &StoragePathFields{objectFields{}}
}

func (f *StoragePathFields) Name(name string) *StoragePathFields {
	f.set("name", name)
	return f
}

func (f *StoragePathFields) Match(match string) *StoragePathFields {
	f.set("match", match)
	return f
}

func (f *StoragePathFields) MatchingAlgorithm(matchingAlgorithm MatchingAlgorithm) *StoragePathFields {
	f.set("matching_algorithm", matchingAlgorithm)
	return f
}

func (f *StoragePathFields) IsInsensitive(isInsensitive bool) *StoragePathFields {
	f.set("is_insensitive", isInsensitive)
	return f
}

type Tag struct {
	ID                int64             `json:"id"`
	Slug              string            `json:"slug"`
	Name              string            `json:"name"`
	Color             Color             `json:"color"`
	TextColor         Color             `json:"text_color"`
	Match             string            `json:"match"`
	MatchingAlgorithm MatchingAlgorithm `json:"matching_algorithm"`
	IsInsensitive     bool              `json:"is_insensitive"`
	IsInboxTag        bool              `json:"is_inbox_tag"`
	DocumentCount     int64             `json:"document_count"`
}

type TagFields struct {
	objectFields
}

var _ json.Marshaler = (*TagFields)(nil)

func NewTagFields() *TagFields {
	return &TagFields{objectFields{}}
}

func (f *TagFields) Name(name string) *TagFields {
	f.set("name", name)
	return f
}

func (f *TagFields) Color(color Color) *TagFields {
	f.set("color", color)
	return f
}

func (f *TagFields) TextColor(textColor Color) *TagFields {
	f.set("text_color", textColor)
	return f
}

func (f *TagFields) Match(match string) *TagFields {
	f.set("match", match)
	return f
}

func (f *TagFields) MatchingAlgorithm(matchingAlgorithm MatchingAlgorithm) *TagFields {
	f.set("matching_algorithm", matchingAlgorithm)
	return f
}

func (f *TagFields) IsInsensitive(isInsensitive bool) *TagFields {
	f.set("is_insensitive", isInsensitive)
	return f
}

func (f *TagFields) IsInboxTag(isInboxTag bool) *TagFields {
	f.set("is_inbox_tag", isInboxTag)
	return f
}
